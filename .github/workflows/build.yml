# This workflow will be triggered by a GitHub pull-request.
# It compiles the code to a release binary, create a Docker image containing
# the binary, and uploads the Docker image to our registry using the branch as
# the registry tag.
---
name: Test and build images

on:
  pull_request:
    branches: ["*"]

  push:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  SERVICE: fpd
jobs:
  # Lint the code and run the tests on Linux
  test:
    name: Test and lint
    runs-on: ubuntu-latest-8-cores
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::901443922744:role/github_actions

      - name: setup sccache
        env:
          SCCACHE_BUCKET: "fiberplane-cache"
          SCCACHE_REGION: "us-east-1"
          SCCACHE_S3_KEY_PREFIX: "sccache/${SERVICE}"
        run: |
          SCCACHE_VERSION="v0.3.0"
          cd `mktemp -d`
          # Install sccache
          curl -o sccache.tar.gz -L https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz
          tar zvxf sccache.tar.gz
          chmod u+x sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache
          sudo mv sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache /usr/bin/sccache
          # Setup cargo config
          echo -e '[build]\nrustc-wrapper = "/usr/bin/sccache"' > "$HOME/.cargo/config.toml"
          # Start server (required since it will need the AWS credentials)
          /usr/bin/sccache --start-server

      - name: setup mold
        run: |
          MOLD_VERSION="1.4.2"
          cd `mktemp -d`
          # Install mold
          curl -o mold.tar.gz -L https://github.com/rui314/mold/releases/download/v${MOLD_VERSION}/mold-${MOLD_VERSION}-x86_64-linux.tar.gz
          tar zvxf mold.tar.gz
          chmod u+x mold-${MOLD_VERSION}-x86_64-linux/bin/mold
          sudo mv mold-${MOLD_VERSION}-x86_64-linux/bin/mold /usr/bin/mold
          # Setup cargo config
          echo -e '[target.x86_64-unknown-linux-gnu]\nlinker = "clang"\nrustflags = ["-C", "link-arg=-fuse-ld=/usr/bin/mold"]' >> "$HOME/.cargo/config.toml"

      - uses: Swatinem/rust-cache@v2

      - name: add rust components
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Check format
        # Skip formatting on main, since it's not critical and should've already
        # been checked before merging
        if: ${{ github.event_name == 'pull_request' }}
        run: cargo fmt -- --check

      - name: Lint code
        # Skip linting on main, since it's not critical and should've already
        # been checked before merging
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Pull latest providers
        run: cargo run pull --branch=main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run tests
        run: cargo test

      - name: sccache stats
        run: /usr/bin/sccache --show-stats

  build:
    uses: ./.github/workflows/reusable_build_images.yml
    needs: test
    secrets:
      BUILDS_BUCKET: ${{ secrets.BUILDS_BUCKET }}
      PRIVATE_GITHUB_TOKEN: ${{ secrets.PRIVATE_GITHUB_TOKEN }}
