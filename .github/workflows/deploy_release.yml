# This will deploy the Kubernetes manifests to a cluster, containing references
# to our release Docker images (ie. tags that use versions).
---
name: Deploy release images to cluster

on:
  workflow_dispatch:
    inputs:
      environment:
        description: The fiberplane environment
        required: true
        default: "demo"
      version:
        description: Version that needs to be deployed
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: "cluster-${{ github.event.inputs.environment }}"
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - id: vars
        name: Export variables
        env:
          SERVICE: proxy
        run: |
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            echo "ingress_root_domain=studio.fiberplane.com" >> $GITHUB_OUTPUT
          else
            echo "::set-output name=ingress_root_domain::${{ github.event.inputs.environment }}.fiberplane.io"
          fi
          short_sha=$(git rev-parse --short "${{ github.event.pull_request.head.sha || github.sha }}")
          echo "SHORT_SHA=${short_sha}" >> $GITHUB_ENV
          echo "SERVICE=${SERVICE}" >> $GITHUB_ENV
          echo "IMAGE=${{ steps.ecr.outputs.registry }}/${SERVICE}" >> $GITHUB_ENV
          echo "TAG=release-${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Send "deploy started" to Slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "environment": "${{ github.event.inputs.environment }}",
              "component": "${{ env.SERVICE }}",
              "trigger": "manual",
              "version": "${{ github.event.inputs.version }}",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOY_STARTED_SLACK_WEBHOOK_URL }}

      - name: Downgrade kubectl to version v1.23.6
        run: |
          curl -LO https://dl.k8s.io/release/v1.23.6/bin/linux/amd64/kubectl
          chmod u+x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Verify image exists
        run: |
          if ! docker pull "$IMAGE:$TAG" ; then
            echo "::error::Image was not found, please wait until it is finished uploading"
            exit 1
          fi

      - name: Template Kubernetes files
        env:
          VERSION: "${{ github.event.inputs.version }}"
          FP_ENVIRONMENT: "${{ github.event.inputs.environment }}"
          FP_INGRESS_ROOT_DOMAIN: ${{ steps.vars.outputs.ingress_root_domain }}
        run: scripts/template_all.sh "deployment/*.template.yaml" > result.yaml

      - name: Create kubeconfig
        env:
          FP_ENVIRONMENT: "${{ github.event.inputs.environment }}"
        run: aws eks update-kubeconfig --name "${FP_ENVIRONMENT}-cluster"

      - name: Kubectl version
        run: kubectl version --client=true

      - name: Apply kubernetes resources
        run: kubectl apply -f result.yaml

      - name: Wait for Kubernetes deployment
        run: kubectl rollout status deployment proxy

      - name: Send "deploy finished" to Slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "environment": "${{ github.event.inputs.environment }}",
              "component": "${{ env.SERVICE }}",
              "trigger": "manual",
              "version": "${{ github.event.inputs.version }}",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOY_FINISHED_SLACK_WEBHOOK_URL }}

      - name: Send "deploy failed" to Slack
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "environment": "${{ github.event.inputs.environment }}",
              "component": "${{ env.SERVICE }}",
              "trigger": "manual",
              "version": "${{ github.event.inputs.version }}",
              "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.DEPLOY_FAILED_SLACK_WEBHOOK_URL }}

  post-event:
    name: Post deployment to all Fiberplane environments
    uses: fiberplane/proxy/.github/workflows/post_event.yml@main
    needs: deploy
    with:
      service: proxy
      trigger: manual
      environment: ${{ inputs.environment }}
      version: ${{ inputs.version }}
    secrets:
      FIBERPLANE_TOKEN: ${{ secrets.FIBERPLANE_TOKEN }}
      FIBERPLANE_DEMO_TOKEN: ${{ secrets.FIBERPLANE_DEMO_TOKEN }}
      FIBERPLANE_DEV_TOKEN: ${{ secrets.FIBERPLANE_DEV_TOKEN }}
