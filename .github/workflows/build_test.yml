# This workflow will be triggered by a GitHub pull-request.
# It compiles the code to a release binary, create a Docker image containing
# the binary, and uploads the Docker image to our registry using the branch as
# the registry tag.
---
name: Build

on:
  workflow_despatch:
    branches: ["build-testing"]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and lint
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2.0.6
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: add rust components
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Check format
        run: cargo fmt -- --check

      - name: Lint code
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --release

      - name: Run tests
        run: cargo test

  build:
    name: Create binary for ${{ matrix.target }}
    needs: test
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: aarch64-apple-darwin
            os: macos-12
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo fetch
        run: cargo fetch --target ${{ matrix.target }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        run: |
          cargo install cross --force
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-apple-darwin'
        run: strip "target/${{ matrix.target }}/release/proxy"

      - name: Prepare artifact
        run: |
          mkdir -p /tmp/artifact/
          cp "target/${{ matrix.target }}/release/proxy" /tmp/artifact/

      # # We are not able to run the ARM based MacOS binary, since this is running
      # # on a x86_64 MacOS machine.
      # - name: Release version information
      #   if: matrix.target != 'aarch64-apple-darwin'
      #   run: |
      #     target/${{ matrix.target }}/release/proxy version -o verbose
      #     target/${{ matrix.target }}/release/proxy version -o json > /tmp/artifact/manifest.json

      - name: Create SHA256 sums for the artifacts (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd /tmp/artifact/
          sha256sum * > checksum.sha256

      - name: Create SHA256 sums for the artifacts (MacOS)
        if: matrix.os == 'macos-12'
        run: |
          cd /tmp/artifact/
          shasum -a 256 * > checksum.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: /tmp/artifact/
          if-no-files-found: error
          retention-days: 1

  